resource_types:
- name: vault
  type: docker-image
  source:
    repository: oratos/vault-resource
    tag: latest

resources:
- name: cf-for-k8s
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((oratos-bot-private-key))

- name: metric-proxy
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/metric-proxy
    private_key: ((oratos-bot-private-key))

- name: metric-proxy-docker
  type: docker-image
  source:
    username: ((oratos-docker.username))
    password: ((oratos-docker.password))
    repository: oratos/metric-proxy
    tag: pipeline-test

- name: denver-metric-proxy-pipeline-vars
  type: vault
  source:
    url: https://vault.oratos.ci.cf-app.com
    role_id: ((vault.role_id))
    secret_id: ((vault.secret_id))
    path: /secret/envs/cf4k8s/denver-metric-proxy-pipeline-vars

jobs:
  - name: run-tests-on-cf-for-k8s-pr
    public: true
    serial: true
    plan:
    - in_parallel:
      - get: cf-for-k8s
      - get: metric-proxy
        trigger: true
      - get: metric-proxy-docker
      - get: denver-metric-proxy-pipeline-vars
    - in_parallel:
      - task: delete-cf
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: relintdockerhubpushbot/cf-for-k8s-ci}
          run:
            path: /bin/bash
            args:
            - -ecx
            - |
              export KUBECONFIG=kube-config.yml
              gcloud auth activate-service-account --key-file=<(echo '((ci_k8s_gcp_service_account_json))') --project='((ci_k8s_gcp_project_name))' 1>/dev/null 2>&1
              gcloud container clusters get-credentials '((ci_k8s_gke_cluster_name))' --zone '((ci_k8s_gcp_project_zone))' 1>/dev/null 2>&1
              kapp delete -a cf --yes
    # Puts do an implicit check so this builds the image and immediately makes
    # it available to the next task and dockerhub
      - put: metric-proxy-docker
        params:
          additional_tags: metric-proxy/dockertags
          dockerfile: metric-proxy/Dockerfile
          build: metric-proxy
    - task: vendir-metrics
      file: metric-proxy/ci/vendir-metrics.yml
    - task: install-cf
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: relintdockerhubpushbot/cf-for-k8s-ci}
        inputs:
          - name: cf-for-k8s-with-metrics
        outputs:
        - name: env-metadata
        - name: vars
        params:
          DNS_DOMAIN: ((ci_k8s_domain))
          DNS_ZONE_NAME: ((ci_k8s_dns_zone_name))
        run:
          path: /bin/bash
          args:
          - -ecx
          - |
            echo '((ci_k8s_gcp_service_account_json))' > sa.json
            export KUBECONFIG=kube-config.yml
            gcloud auth activate-service-account --key-file=sa.json --project='((ci_k8s_gcp_project_name))' 1>/dev/null 2>&1
            gcloud container clusters get-credentials '((ci_k8s_gke_cluster_name))' --zone '((ci_k8s_gcp_project_zone))' 1>/dev/null 2>&1
            cf-for-k8s-with-metrics/hack/confirm-network-policy.sh '((ci_k8s_gke_cluster_name))' '((ci_k8s_gcp_project_zone))'
            echo "Generating install values..."
            cf-for-k8s-with-metrics/hack/generate-values.sh -d "${DNS_DOMAIN}" -g sa.json > vars/cf-install-values.yml
            # echo "Writing cf-install-values.yml to vault"
            # vault write /secret/envs/cf4k8s/denver-metric-proxy-pipeline-vars vars_file=@vars/cf-install-values.yml
            echo "Installing CF..."
            cf-for-k8s-with-metrics/bin/install-cf.sh vars/cf-install-values.yml
            bosh interpolate --path /cf_admin_password vars/cf-install-values.yml > env-metadata/cf-admin-password.txt
            echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt
            echo "Configuring DNS..."
            cf-for-k8s-with-metrics/hack/update-gcp-dns.sh "${DNS_DOMAIN}" "${DNS_ZONE_NAME}"
    - put: denver-metric-proxy-pipeline-vars
      params:
        data: vars
    - task: run-smoke-test
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: relintdockerhubpushbot/cf-test-runner}
        inputs:
          - name: cf-for-k8s-with-metrics
          - name: env-metadata
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            DNS_DOMAIN=$(cat env-metadata/dns-domain.txt)
            export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
            export SMOKE_TEST_APPS_DOMAIN="${DNS_DOMAIN}"
            export SMOKE_TEST_USERNAME=admin
            export SMOKE_TEST_PASSWORD=$(cat env-metadata/cf-admin-password.txt)
            export SMOKE_TEST_SKIP_SSL=true
            cf-for-k8s-with-metrics/hack/run-smoke-tests.sh
